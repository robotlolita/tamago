% language: tamago
namespace tamago::prelude

use tamago::native::unsafe::type as TypeM;
use tamago::native::unsafe::integer as IntegerM;
use tamago::native::unsafe::float64 as Float64M;
use tamago::native::unsafe::boolean as BooleanM;
use tamago::native::unsafe::text as TextM;
use tamago::native::unsafe::tuple as TupleM;
use tamago::native::unsafe::equality as EqualityM;


// Types
define Any = TypeM.Any;
define Nothing = TypeM.Nothing;
define Integer = TypeM.Integer;
define Float64 = TypeM.Float64;
define Boolean = TypeM.Boolean;
define Symbol = TypeM.Symbol;
define Text = TypeM.Text;
define Tuple = TypeM.Tuple;
define Lambda = TypeM.Lambda;


// Operators
define a + b =
begin
  match [a, b] with
  | [_ is Integer, _ is Integer] => IntegerM.add(a, b);
  | [_ is Float64, _ is Float64] => Float64M.add(a, b);
  | [_ is Integer, _ is Float64] => Float64M.add(IntegerM.to-float(a), b);
  | [_ is Float64, _ is Integer] => Float64M.add(a, IntegerM.to-float(b));
  end
end

define a - b =
begin
  match [a, b] with
  | [_ is Integer, _ is Integer] => IntegerM.sub(a, b);
  | [_ is Float64, _ is Float64] => Float64M.sub(a, b);
  | [_ is Integer, _ is Float64] => Float64M.sub(IntegerM.to-float(a), b);
  | [_ is Float64, _ is Integer] => Float64M.sub(a, IntegerM.to-float(b));
  end
end

define a * b =
begin
  match [a, b] with
  | [_ is Integer, _ is Integer] => IntegerM.mul(a, b);
  | [_ is Float64, _ is Float64] => Float64M.mul(a, b);
  | [_ is Integer, _ is Float64] => Float64M.mul(IntegerM.to-float(a), b);
  | [_ is Float64, _ is Integer] => Float64M.mul(a, IntegerM.to-float(b));
  end
end

define a / b =
begin
  match [a, b] with
  | [_ is Integer, _ is Integer] => IntegerM.div(a, b);
  | [_ is Float64, _ is Float64] => Float64M.div(a, b);
  | [_ is Integer, _ is Float64] => Float64M.div(IntegerM.to-float(a), b);
  | [_ is Float64, _ is Integer] => Float64M.div(a, IntegerM.to-float(b));
  end
end

define a ** b =
begin
  match [a, b] with
  | [_ is Integer, _ is Integer] => IntegerM.pow(a, b);
  | [_ is Float64, _ is Float64] => Float64M.pow(a, b);
  | [_ is Integer, _ is Float64] => Float64M.pow(IntegerM.to-float(a), b);
  | [_ is Float64, _ is Integer] => Float64M.pow(a, IntegerM.to-float(b));
  end
end

define a === b = EqualityM.eq(a, b);
define a =/= b = EqualityM.not-eq(a, b);

define a > b =
begin
  match [a, b] with
  | [_ is Integer, _ is Integer] => IntegerM.gt(a, b);
  | [_ is Float64, _ is Float64] => Float64M.gt(a, b);
  | [_ is Integer, _ is Float64] => Float64M.gt(IntegerM.to-float(a), b);
  | [_ is Float64, _ is Integer] => Float64M.gt(a, IntegerM.to-float(b));
  end
end

define a >= b =
begin
  match [a, b] with
  | [_ is Integer, _ is Integer] => IntegerM.gte(a, b);
  | [_ is Float64, _ is Float64] => Float64M.gte(a, b);
  | [_ is Integer, _ is Float64] => Float64M.gte(IntegerM.to-float(a), b);
  | [_ is Float64, _ is Integer] => Float64M.gte(a, IntegerM.to-float(b));
  end
end

define a < b =
begin
  match [a, b] with
  | [_ is Integer, _ is Integer] => IntegerM.lt(a, b);
  | [_ is Float64, _ is Float64] => Float64M.lt(a, b);
  | [_ is Integer, _ is Float64] => Float64M.lt(IntegerM.to-float(a), b);
  | [_ is Float64, _ is Integer] => Float64M.lt(a, IntegerM.to-float(b));
  end
end

define a <= b =
begin
  match [a, b] with
  | [_ is Integer, _ is Integer] => IntegerM.lte(a, b);
  | [_ is Float64, _ is Float64] => Float64M.lte(a, b);
  | [_ is Integer, _ is Float64] => Float64M.lte(IntegerM.to-float(a), b);
  | [_ is Float64, _ is Integer] => Float64M.lte(a, IntegerM.to-float(b));
  end
end

define a ++ b =
begin
  match [a, b] with
  | [_ is Text, _ is Text] => TextM.concat(a, b);
  | [_ is Tuple, _ is Tuple] => TupleM.concat(a, b);
  end
end

define a and b =
begin
  assert a is Boolean;
  assert b is Boolean;
  BooleanM.and(a, b);
end

define a or b =
begin
  assert a is Boolean;
  assert b is Boolean;
  BooleanM.or(a, b);
end

define not a =
begin
  assert a is Boolean;
  BooleanM.not(a);
end

define f >> g = fun(x) -> g(f(x));
define f << g = fun(x) -> f(g(x));

define tuple at: index =
begin
  assert tuple is Tuple;
  assert (index > 0) and (index <= TupleM.size(tuple));
  TupleM.at(tuple, index - 1);
end

define tuple slice-from: start to: stop =
begin
  assert tuple is Tuple;
  assert start > 0;
  assert start <= stop;
  assert stop <= TupleM.size(tuple);
  TupleM.slice(tuple, start - 1, stop - 1);
end

define tuple slice-from: start =
  tuple slice-from: start to: TupleM.size(tuple);

define tuple first = tuple at: 1;

define tuple rest =
  tuple slice-from: 1;