% language: tamago
/// Boolean values
namespace tamago::base::boolean

use tamago::native::unsafe::boolean as N;
use tamago::native::unsafe::types as Types;

/// The boolean type, accepting the values `true` and `false`.
define Boolean = Types.Boolean;


/// Logical conjunction
@type fun(Boolean, Boolean) -> Boolean
define left and right =
begin
  N.and(left, right);
where
  assert true and true ==> true;
  assert true and false ==> false;
  assert false and true ==> false;
  assert false and false ==> false;
end

/// Logical disjunction
@type fun(Boolean, Boolean) -> Boolean
define left or right =
begin
  N.or(left, right);
where
  assert true or true ==> true;
  assert true or false ==> true;
  assert false or true ==> true;
  assert false or false ==> false;
end

/// Logical negation
@type fun(Boolean) -> Boolean
define not value =
begin
  N.not(value);
where
  assert not true ==> false;
  assert not false ==> true;
end