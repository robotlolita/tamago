% language: tamago
namespace tamago::base::boolean

use tamago::native::unsafe::boolean as Native;
use tamago::native::unsafe::type as Types;

/*
 * The boolean type, accepting the values `true` and `false`.
 */
define Boolean = Types.Boolean;


/*
 * Logical conjunction.
 */
@type fun(Boolean, Boolean) -> Boolean
define left and right =
begin
  assert left is Boolean;
  assert right is Boolean;
  Native.and(left, right);
where
  assert true and true ==> true;
  assert true and false ==> false;
  assert false and true ==> false;
  assert false and false ==> false;
end

/*
 * Logical disjunction.
 */
@type fun(Boolean, Boolean) -> Boolean
define left or right =
begin
  assert left is Boolean;
  assert right is Boolean;
  Native.or(left, right);
where
  assert true or true ==> true;
  assert true or false ==> true;
  assert false or true ==> true;
  assert false or false ==> false;
end

/*
 * Logical negation.
 */
@type fun(Boolean) -> Boolean
define not value =
begin
  assert value is Boolean;
  Native.not(value);
where
  assert not true ==> false;
  assert not false ==> true;
end