%[
open Tamago.Language.Ast
open Tamago.Language.Syntax.Utils
]%

Tamago : File {
  File =
    | Header module_ ns:Namespace defs:Definition* end
      %[ file ns (list defs) ]%
  
  Header =
    | "%" "language" ":" "tamago"

  Definition =
    | ImportDef
    | OpenDef
    | RecordDef
    | UnionDef
    | FunctionDef
    | AliasDef
    | ModuleDef
    | TestDef

  ImportDef =
    | use_ ns:Namespace as_ n:Name
      %[ DImport (ns, AName n) ]%

    | use_ external_ s:string as_ n:Name
      %[ DFFI (s, AName n) ]%

  OpenDef =
    | open_ e:Expression
      %[ DOpen (e) ]%

  UnionDef =
    | union_ n:Name is_ cs:UnionCase+ end_
      %[ DUnion (n, list cs) ]%

  UnionCase =
    | r:RecordDef
      %[ recordToVariant r ]%

  RecordDef =
    | record_ n:Name "{" ps:List0<Name, ","> "}"
      %[ DRecord (n, ps) ]%
  
  FunctionDef =
    | function_ s:Signature "=" e:Expression t:FunctionTest?
      %[ makeFunDeclaration s e t ]%

  FunctionTest =
    | where_ e:Expression   %[ e ]%

  AliasDef =
    | define_ n:Name "=" e:Expression
      %[ DDefine (n, e) ]%

  ModuleDef =
    | module_ n:Name is_ defs:Definition* end_
      %[ DModule (n, list defs) ]%

  TestDef =
    | test_ s:String do_ e:Expression end_
      %[ DTest (s, e) ]%

  Signature =
    | op:PrefixOp n:Param                       %[ (op, [n]) ]%
    | l:Param op:BinaryOp r:Param               %[ (op, [l, r]) ]%
    | n:Param kws:KeywordParams                 %[ makeSig [n] kws ]%
    | kws:KeywordParams                         %[ makeSig [] kws ]%
    | s:Param n:Name                            %[ (n, [s]) ]%

  Param =
    | n:NamePattern   %[ parameter n ]%

  KeywordParams =
    | kws:KeywordParam+   %[ list kws ]%

  KeywordParam =
    | kw:Keyword n:Param
      %[ (kw, n) ]%
  

  ExprWithTuple =
    | TupleExpr
    | Expression

  Expression =
    | SequenceExpr

  SequenceExpr =
    | l:SequenceExpr ";" r:Expression     %[ ESequence (l, r) ]%
    | AssertExpr
    | LetExpr

  LetExpr =
    | let_ p:Pattern "=" v:IfExpr in_ e:Expression    %[ makeLet p v e ]%
    | IfExpr

  IfExpr = 
    | if_ t:PipeExpr then_ c:Expression else_ a:Expression   %[ EIf (t, c, a) ]%
    | PipeExpr

  PipeExpr =
    | l:PipeExpr "|>" r:KeywordExpr     %[ EApply (r, [l]) ]%
    | KeywordExpr

  KeywordExpr =
    | kws:KeywordApply                  %[ makeApp [] kws ]%
    | s:BinaryExpr kws:KeywordApply     %[ makeApp [s] kws ]%
    | BinaryExpr

  KeywordApply =
    | ns:Namespace "." kws:KeywordApplyPair+  %[ (Some ns, list kws) ]%
    | kws:KeywordApplyPair+                   %[ (None, list kws) ]%
    
  KeywordApplyPair =
    | k:Keyword e:BinaryExpr   %[ (k, e) ]%

  AssertExpr =
    | assert_ e:PipeExpr              %[ EAssert e ]%
    | l:PipeExpr "==>" r:PipeExpr     %[ EAssertMatch (l, r) ]%

  BinaryExpr =
    | l:UnaryExpr op:BinaryOp r:UnaryExpr     %[ EApply (EVariable op, [l; r]) ]%
    | UnaryExpr

  UnaryExpr =
    | op:PrefixOp s:ApplyExpr             %[ EApply (EVariable op, [s]) ]%
    | s:ApplyExpr n:RestrictedMember      %[ EApply (projectPath n, [s]) ]%
    | ApplyExpr

  ApplyExpr =
    | c:ApplyExpr ps:PositionalArgumentList     %[ EApply (c, ps) ]%
    | o:ApplyExpr ps:RecordProperties           %[ EUpdate (o, ps) ]%
    | MemberExpr

  PositionalArgumentList =
    | "(" ps:List0<Expression, ","> ")"  %[ ps ]%

  RecordProperties =
    | "{" ps:List0<RecordPair, ","> "}"  %[ ps ]%

  RecordPair =
    | l:Label "=" e:Expression                   %[ propertyExpr l e ]%

  MemberExpr =
    | o:MemberExpr "." n:Name                     %[ EProject (o, LELabel n) ]%
    | o:MemberExpr "." "(" n:Expression ")"       %[ EProject (o, LEDynamic n) ]%
    | PrimaryExpr

  PrimaryExpr =
    | MatchExpr
    | LambdaExpr
    | l:LiteralExpr             %[ ELiteral l ]%
    | RecordExpr
    | ListExpr
    | HoleExpr
    | n:Name                    %[ EVariable n ]%
    | "(" e:ExprWithTuple ")"   %[ e ]%

  MatchExpr =
    | match_ e:ExprWithTuple with_ cs:MatchCase+ end_
      %[ EMatch (e, list cs) ]%

  MatchCase =
    | "|" p:GroupPattern when_ g:Expression "=>" e:Expression    %[ matchCase p g e ]%
    | "|" p:GroupPattern "=>" e:Expression                       %[ matchCase0 p e ]%

  Pattern =
    | p:Pattern as_ n:NamePattern                               %[ POuterBind (p, n) ]%
    | p:Pattern "::" m:MemberExpr                               %[ PContract (p, m) ]%
    | l:LiteralExpr                                             %[ PLiteral l ]%
    | "[" hd:List1<Pattern, ","> "," "..." tl:Pattern "]"       %[ patternSpreadToCons hd tl ]%
    | "[" ps:List0<Pattern, ","> "]"                            %[ patternListToCons ps ]%
    | o:MemberExpr "{" ps:List0<PatternPair, ","> "}"           %[ PExtractor (o, ps) ]%
    | n:NamePattern                                             %[ PBind n ]%
    | "_"                                                       %[ PAnything ]%
    | "(" p:GroupPattern ")"                                    %[ p ]%

  GroupPattern =
    | hd:Pattern "," tl:List1<Pattern, ",">                     %[ PTuple (hd :: tl) ]%
    | Pattern

  PatternPair =
    | l:Label "=" p:Pattern     %[ propertyPattern l p ]%
    | n:Name                    %[ propertyPattern (LELabel n) (PBind (NPName n)) ]%

  Label =
    | "(" e:Expression ")"      %[ LEDynamic e ]%
    | n:Name                    %[ LELabel n ]%

  RecordExpr =
    | ps:RecordProperties       %[ ERecord ps ]%

  LambdaExpr =
    | "(" ps:ListOf<Param, ","> ")" "=>" e:Expression
      %[ ELambda (ps, e) ]%

  LiteralExpr =
    | Float
    | Integer
    | String
    | Boolean
    | n:nothing_      %[ LNothing ]%

  ListExpr =
    | "[" hd:List1<Expression, ","> "," "..." tl:Expression "]"     %[ listSpreadToCons hd tl ]%
    | "[" xs:List0<Expression, ","> "]"                             %[ listToCons xs ]%

  TupleExpr =
    | hd:Expression "," tl:List1<Expression, ",">                   %[ ETuple (hd :: tl) ]%

  HoleExpr =
    | hole      %[ EHole ]%


  Name = ~reserved n:id ~":"                          %[ n ]%
  Keyword = kw:keyword                                %[ kw ]%
  RestrictedMember = ns:Namespace ~("." Keyword)      %[ ns ]%
  Namespace = List1<Name, ".">
  NamePattern = 
    | n:Name    %[ NPName n ]%
    | hole      %[ NPIgnore ]%
  
  BinaryOp = binary_op
  PrefixOp = prefix_op

  Float = f:float             %[ LFloat (parseNumber f) ]%
  Integer = i:integer         %[ LInteger i ]%
  Boolean = b:boolean         %[ LBoolean b ]%
  String = s:string           %[ LString s ]%

  List1<A, B> = x:NonemptyListOf<A, B>  %[ list x ]%
  List0<A, B> = x:ListOf<A, B>          %[ list x ]%

  // -- Lexemes
  newline = "\n" | "\r"
  line = (~newline any)*
  comment = "//" line
  space += comment

  id_start = letter
  id_rest = letter | digit | "-"
  id = id_start id_rest*
  hole = "_"
  keyword = id ":"


  integer = ("-" | "+")? digit+
  float = ("-" | "+")? digit+ "." digit+


  boolean =
    | true_       %[ true ]%
    | false_      %[ false ]%


  hex_digit = "a" .. "f" | "A" .. "F" | "0" .. "9"

  escape_sequence =
    | "u" unicode_escape
    | any
  
  unicode_escape =
    | hex_digit hex_digit hex_digit hex_digit

  string_character =
    | ~("\"" | "\\") any
    | "\\" escape_sequence

  double_string =
    | "\"" string_character* "\""

  string =
    | s:double_string     %[ parseString s ]%


  binary_op =
    | ">=" | ">>" | ">"
    | "<=" | "<<" | "<"
    | "===" | "=/="
    | "++" | "+"
    | "-"
    | "/"
    | "**" | "*"
    | and_ | or_

  prefix_op =
    | not_

  kw<word> = word ~id_rest

  use_ = kw<"use">
  as_ = kw<"as">
  record_ = kw<"record">
  module_ = kw<"module">
  do_ = kw<"do">
  end_ = kw<"end">
  define_ = kw<"define">
  let_ = kw<"let">
  in_ = kw<"in">
  if_ = kw<"if">
  then_ = kw<"then">
  else_ = kw<"else">
  assert_ = kw<"assert">
  true_ = kw<"true">
  false_ = kw<"false">
  nothing_ = kw<"nothing">
  new_ = kw<"new">
  and_ = kw<"and">
  or_ = kw<"or">
  not_ = kw<"not">
  external_ = kw<"external">
  match_ = kw<"match">
  with_ = kw<"with">
  when_ = kw<"when">
  test_ = kw<"test">
  for_ = kw<"for">
  function_ = kw<"function">
  process_ = kw<"process">
  where_ = kw<"where">
  yield_ = kw<"yield">
  all_ = kw<"all">
  break_ = kw<"break">
  union_ = kw<"union">
  is_ = kw<"is">
  open_ = kw<"open">

  reserved =
    | use_ | as_ | record_ | module_
    | do_ | end_ | define_ | let_ 
    | in_ | if_ | then_ | else_ 
    | assert_ | true_ | false_
    | nothing_ | new_ | and_ | or_ | not_
    | external_ | match_ | with_ | when_
    | test_ | for_ | function_ | process_
    | where_ | yield_ | all_ | break_
    | union_ | is_ | open_
}